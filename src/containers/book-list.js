import React, { Component } from 'react'; 
import { connect } from 'react-redux'; //import connect function from react-redux
import { selectBook } from '../actions/index'; //import selectBook function (action creator) 
import { bindActionCreators } from 'redux'; 
// bindActionCreators is a function that ensures that the action generated by the action creator ends up flowing through all the reducers 



class BookList extends Component {
	renderList() {
		return this.props.books.map((book) => {
			return (
				<li 
					key={book.title} 
					onClick={() => this.props.selectBook(book)}
					className="list-group-item">
					{book.title}
				</li>
			);
		});
	}
	
	render() {
		return (
			<ul className="list-group col-sm-4">
				{this.renderList()}
			</ul>
			)
	}
}

function mapStateToProps(state) {
	// this function is the glue between react and redux 
	// takes in the application state as an arguement 
	// whatever gets returned from here will show up as props inside of BookList container above 
	return {
		books: state.books
	}; 
}

function mapDispatchToProps(dispatch) {
	// Whenever selectBook is called, the result should be passed to all reducers 
    // Anything returned from this function will end up as props on the BookList container 
    // Now we can use this.props.selectBook in the above container and this will call our selectBook action creator
	return bindActionCreators({ selectBook: selectBook }, dispatch); 
}


//Promote BookList from a component to a container - it needs to know about this new dispatch method, selectBook. 
//Makes it available as a prop. 
export default connect(mapStateToProps, mapDispatchToProps)(BookList); 
// connect(function)(component) and it produces a container, which is aware of the state contained by redux 








